using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class PlayerController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float moveSpeed = 5f;
    public float runMultiplier = 2f; // ‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    public float gridSize = 1f;

    private bool isMoving;
    private Vector2 input;
    private Vector2 lastDir;   // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    private Animator animator;

    [Header("Collision Layers")]
    public LayerMask solidObjectsLayer;
    public LayerMask interactableLayer;
    public LayerMask battleLayer;

    [Header("Projectile Settings")]
    public GameObject projectilePrefab;  // üî• Drag prefab ‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Inspector
    public float projectileSpeed = 10f;
    public AudioSource audioSource;         // üîä ‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    public AudioSource footstepSource;    // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô
    public AudioClip shootSound;            // üî• ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏¥‡∏á
    public AudioClip footstepSound;      // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô

    [Header("EXP & Level System")]
    public int currentExp = 0;
    public int currentLevel = 1;
    public int[] expToNextLevel = { 0, 100, 200, 300 }; // ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ
    public ExperienceUI expUI; // ‡∏ú‡∏π‡∏Å‡πÉ‡∏ô Inspector

    private int projectileDamage = 1; // ‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•
   
    

    [Header("Health Settings")]
    public int maxHealth = 10;
    private int currentHealth;

    public HealthUI healthUI;

    [Header("Low Health Warning")]
    public AudioSource lowHealthAudio;
    public float lowHealthThreshold = 25f;
    public float flashSpeed = 2f;
    public CanvasGroup redOverlay; // ‡πÉ‡∏ä‡πâ CanvasGroup ‡πÅ‡∏ó‡∏ô Image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡∏Å‡∏ß‡πà‡∏≤

    private bool isLowHealthEffectActive = false;
    public string sceneName;
  

    private void Awake()
    {
        animator = GetComponent<Animator>();

        currentHealth = maxHealth;

        if (healthUI != null)
            healthUI.SetMaxHealth(maxHealth);
        
        if (expUI != null)
        {
            expUI.SetMaxExp(expToNextLevel[currentLevel]);
            expUI.SetExp(currentExp);
            expUI.SetLevelText(currentLevel);
        }

    }

    public void HandleUpdate()
    {
        bool isRunning = Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
        if (!isMoving)
        {
            input.x = Input.GetAxisRaw("Horizontal");
            input.y = Input.GetAxisRaw("Vertical");

            // ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡πÅ‡∏¢‡∏á
            if (input.x != 0) input.y = 0;

            if (input != Vector2.zero)
            {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
                animator.SetFloat("moveX", input.x);
                animator.SetFloat("moveY", input.y);

                lastDir = input;

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞ Grid
                var targetPos = transform.position;
                targetPos.x += input.x * gridSize;
                targetPos.y += input.y * gridSize;

                if (IsWalkable(targetPos))
                {
                    StartCoroutine(Move(targetPos, isRunning));
                }
            }
        }

        // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á)
        if (Input.GetKeyDown(KeyCode.E))
            Interact();

        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏Å projectile
        if (Input.GetMouseButtonDown(1))
            SpawnProjectile();

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á
        animator.SetBool("isMoving", isMoving);
        // ‚úÖ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏¥‡∏ô
        if (isMoving)
        {
            if (footstepSource != null)
            {
                if (!footstepSource.isPlaying)
                {
                    footstepSource.clip = footstepSound;
                    footstepSource.loop = true;
                    footstepSource.Play();
                }

                // üéµ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ß‡∏¥‡πà‡∏á
                footstepSource.pitch = isRunning ? 2f : 1f;
            }
        }
        else
        {
            if (footstepSource != null && footstepSource.isPlaying)
                footstepSource.Stop();
        }
        

    }

    void Interact()
    {
        var facingDir = new Vector3(lastDir.x, lastDir.y);
        var interactPos = transform.position + facingDir * gridSize;

        var collider = Physics2D.OverlapCircle(interactPos, 0.2f, interactableLayer);
        if (collider != null)
        {
            collider.GetComponent<Interactable>()?.Interact();
        }
    }

    IEnumerator Move(Vector3 targetPos, bool isRunning)
    {
        isMoving = true;

        // üèÉ‚Äç‚ôÇÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏¥‡πà‡∏á
        float speed = isRunning ? moveSpeed * runMultiplier : moveSpeed;

        // üé¨ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
        animator.speed = isRunning ? 2f : 1f;

        while ((targetPos - transform.position).sqrMagnitude > Mathf.Epsilon)
        {
            transform.position = Vector3.MoveTowards(transform.position, targetPos, speed * Time.deltaTime);
            yield return null;
        }

        // üî• Snap ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á Grid
        transform.position = new Vector3(
            Mathf.Round(transform.position.x / gridSize) * gridSize,
            Mathf.Round(transform.position.y / gridSize) * gridSize,
            transform.position.z
        );

        // ‚ùó ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï animator.speed ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Å‡∏±‡∏ô‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏ú‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤)
        animator.speed = 1f;
        isMoving = false;
        CheckForEncounters();
    }

    private bool IsWalkable(Vector3 targetPos)
    {
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö ‚Äî ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        if (Physics2D.OverlapCircle(targetPos, 0.2f, solidObjectsLayer | interactableLayer) != null)
        {
            return false;
        }
        return true;
    }

    void SpawnProjectile()
    {
        if (projectilePrefab == null) return;

        // üîä ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ô‡∏¢‡∏¥‡∏á
        if (audioSource != null && shootSound != null)
        audioSource.PlayOneShot(shootSound);

        // ‡∏à‡∏∏‡∏î‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        Vector3 spawnPos = transform.position + new Vector3(lastDir.x, lastDir.y, 0) * 0.5f;

        GameObject proj = Instantiate(projectilePrefab, spawnPos, Quaternion.identity);

        // ‡∏™‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ projectile
        Projectile p = proj.GetComponent<Projectile>();
        if (p != null)
        {
            p.SetDirection(lastDir, projectileSpeed);
            p.SetDamage(projectileDamage);
        }

        TakeDamage(1);
    }

    private void CheckForEncounters()
    {
        if (Physics2D.OverlapCircle(transform.position, 0.2f, battleLayer) != null)
        {
            if (Random.Range(1, 101) <= 20)
            {
                Debug.Log("A battle has started!");
            }
        }
    }

    public void TakeDamage(int amount)
    {
        currentHealth -= amount;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);
        

        if (healthUI != null)
            healthUI.SetHealth(currentHealth);

        if (currentHealth <= lowHealthThreshold && !isLowHealthEffectActive)
            StartCoroutine(LowHealthEffect());
        else if (currentHealth > lowHealthThreshold && isLowHealthEffectActive)
            StopLowHealthEffect();

        if (currentHealth <= 0)
        {
            SceneManager.LoadScene(sceneName);
            Debug.Log("Player is out of health!");
            // ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î Game Over ‡∏´‡∏£‡∏∑‡∏≠ disable movement ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
        }
    }

    IEnumerator LowHealthEffect()
    {
        isLowHealthEffectActive = true;

        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏õ
        if (lowHealthAudio != null && !lowHealthAudio.isPlaying)
        {
            lowHealthAudio.loop = true;
            lowHealthAudio.Play();
        }

        float t = 0f;
        while (isLowHealthEffectActive)
        {
            t += Time.deltaTime * flashSpeed;
            float alpha = Mathf.PingPong(t, 1f) * 0.5f; // ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö 0 ‚Üí 0.5
            if (redOverlay != null)
                redOverlay.alpha = alpha;

            yield return null;
        }
    }

    void StopLowHealthEffect()
    {
        isLowHealthEffectActive = false;

        if (lowHealthAudio != null && lowHealthAudio.isPlaying)
            lowHealthAudio.Stop();

        if (redOverlay != null)
            redOverlay.alpha = 0f;
    }

    public void GainExp(int amount)
    {
        if (currentLevel >= 4) return; // ‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß

        currentExp += amount;
        if (expUI != null)
            expUI.SetExp(currentExp);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏û
        if (currentExp >= expToNextLevel[currentLevel])
        {
            currentExp = 0;
            currentLevel++;
            LevelUp();
        }
    }

    void LevelUp()
    {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        if (expUI != null)
        {
            if (currentLevel < expToNextLevel.Length)
                expUI.SetMaxExp(expToNextLevel[currentLevel]);
            expUI.SetLevelText(currentLevel);
            expUI.SetExp(currentExp);
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏ó‡∏•‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•
        projectileDamage = Mathf.Clamp(currentLevel, 1, 4);

        Debug.Log("Level Up! Now Level " + currentLevel + ", Damage = " + projectileDamage);
    }
    
    public void Heal(int amount)
    {
        currentHealth += amount;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);

        if (healthUI != null)
            healthUI.SetHealth(currentHealth);

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏Å‡∏¥‡∏ô threshold ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if (currentHealth > lowHealthThreshold && isLowHealthEffectActive)
            StopLowHealthEffect();

        Debug.Log($"Healed {amount} HP! Current HP: {currentHealth}");
    }

    

}
