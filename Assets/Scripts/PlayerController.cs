using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float moveSpeed = 5f;
    public float gridSize = 1f;   // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Grid (Tile Size)

    private bool isMoving;
    private Vector2 input;
    private Vector2 lastDir;   // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    private Animator animator;

    [Header("Collision Layers")]
    public LayerMask solidObjectsLayer;
    public LayerMask interactableLayer;
    public LayerMask battleLayer;

    [Header("Projectile Settings")]
    public GameObject projectilePrefab;  // üî• Drag prefab ‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡πÉ‡∏ô Inspector
    public float projectileSpeed = 10f;

    [Header("Health Settings")]
    public int maxHealth = 10;
    private int currentHealth;

    public HealthUI healthUI;

    private void Awake()
    {
        animator = GetComponent<Animator>();

        currentHealth = maxHealth;

        if (healthUI != null)
            healthUI.SetMaxHealth(maxHealth);

    }

    public void HandleUpdate()
    {
        if (!isMoving)
        {
            input.x = Input.GetAxisRaw("Horizontal");
            input.y = Input.GetAxisRaw("Vertical");

            // ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡πÅ‡∏¢‡∏á
            if (input.x != 0) input.y = 0;

            if (input != Vector2.zero)
            {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
                animator.SetFloat("moveX", input.x);
                animator.SetFloat("moveY", input.y);

                lastDir = input;

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡∏•‡∏∞ Grid
                var targetPos = transform.position;
                targetPos.x += input.x * gridSize;
                targetPos.y += input.y * gridSize;

                if (IsWalkable(targetPos))
                {
                    StartCoroutine(Move(targetPos));
                }
            }
        }

        // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á)
        if (Input.GetKeyDown(KeyCode.Z))
            Interact();

        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏Å projectile
        if (Input.GetMouseButtonDown(1))
            SpawnProjectile();

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏£‡∏¥‡∏á
        animator.SetBool("isMoving", isMoving);
    }

    void Interact()
    {
        var facingDir = new Vector3(lastDir.x, lastDir.y);
        var interactPos = transform.position + facingDir * gridSize;

        var collider = Physics2D.OverlapCircle(interactPos, 0.2f, interactableLayer);
        if (collider != null)
        {
            collider.GetComponent<Interactable>()?.Interact();
        }
    }

    IEnumerator Move(Vector3 targetPos)
    {
        isMoving = true;

        while ((targetPos - transform.position).sqrMagnitude > Mathf.Epsilon)
        {
            transform.position = Vector3.MoveTowards(transform.position, targetPos, moveSpeed * Time.deltaTime);
            yield return null;
        }

        // üî• Snap to Grid ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Tile
        transform.position = new Vector3(
            Mathf.Round(transform.position.x / gridSize) * gridSize,
            Mathf.Round(transform.position.y / gridSize) * gridSize,
            transform.position.z
        );

        isMoving = false;
        CheckForEncounters();
    }

    private bool IsWalkable(Vector3 targetPos)
    {
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ä‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö ‚Äî ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        if (Physics2D.OverlapCircle(targetPos, 0.2f, solidObjectsLayer | interactableLayer) != null)
        {
            return false;
        }
        return true;
    }

    void SpawnProjectile()
    {
        if (projectilePrefab == null) return;

        // ‡∏à‡∏∏‡∏î‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡∏™‡∏∏‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        Vector3 spawnPos = transform.position + new Vector3(lastDir.x, lastDir.y, 0) * 0.5f;

        GameObject proj = Instantiate(projectilePrefab, spawnPos, Quaternion.identity);

        // ‡∏™‡πà‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ projectile
        Projectile p = proj.GetComponent<Projectile>();
        if (p != null)
        {
            p.SetDirection(lastDir, projectileSpeed);
        }

        TakeDamage(1);
    }

    private void CheckForEncounters()
    {
        if (Physics2D.OverlapCircle(transform.position, 0.2f, battleLayer) != null)
        {
            if (Random.Range(1, 101) <= 20)
            {
                Debug.Log("A battle has started!");
            }
        }
    }

    public void TakeDamage(int amount)
    {
        currentHealth -= amount;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);

        if (healthUI != null)
            healthUI.SetHealth(currentHealth);

        if (currentHealth <= 0)
        {
            Debug.Log("Player is out of health!");
            // ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î Game Over ‡∏´‡∏£‡∏∑‡∏≠ disable movement ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
        }
    }



}
